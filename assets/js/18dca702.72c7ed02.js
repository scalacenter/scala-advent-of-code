"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9010],{4058:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=t(7462),i=(t(7294),t(3905));t(6340);const o={},r="Day 2: Red-Nosed Reports",l={unversionedId:"2024/puzzles/day02",id:"2024/puzzles/day02",title:"Day 2: Red-Nosed Reports",description:"by @spamegg1",source:"@site/target/mdoc/2024/puzzles/day02.md",sourceDirName:"2024/puzzles",slug:"/2024/puzzles/day02",permalink:"/scala-advent-of-code/2024/puzzles/day02",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2024/puzzles/day02.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 1: Historian Hysteria",permalink:"/scala-advent-of-code/2024/puzzles/day01"},next:{title:"Day 3: Mull It Over",permalink:"/scala-advent-of-code/2024/puzzles/day03"}},s={},p=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Solution summary",id:"solution-summary",level:2},{value:"Parsing",id:"parsing",level:3},{value:"Part 1: methods of the <code>Report</code> case class",id:"part-1-methods-of-the-report-case-class",level:3},{value:"Part 2",id:"part-2",level:3},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],c={toc:p};function m(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-2-red-nosed-reports"},"Day 2: Red-Nosed Reports"),(0,i.kt)("p",null,"by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/spamegg1"},"@spamegg1")),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2024/day/2"},"https://adventofcode.com/2024/day/2")),(0,i.kt)("h2",{id:"solution-summary"},"Solution summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First we parse each line of the input into a ",(0,i.kt)("inlineCode",{parentName:"li"},"Report")," case class: ",(0,i.kt)("inlineCode",{parentName:"li"},"case class Report(levels: Seq[Long])")),(0,i.kt)("li",{parentName:"ul"},"In each ",(0,i.kt)("inlineCode",{parentName:"li"},"Report"),", we construct the sequence of consecutive pairs."),(0,i.kt)("li",{parentName:"ul"},'For part 1, we check if the pairs are all increasing or all decreasing, and if the difference is within the given limits (such a report is "safe").'),(0,i.kt)("li",{parentName:"ul"},"For part 2, we construct new ",(0,i.kt)("inlineCode",{parentName:"li"},"Report"),"s obtained by dropping one entry in the original report, and check if there exists a safe ",(0,i.kt)("inlineCode",{parentName:"li"},"Report")," among these."),(0,i.kt)("li",{parentName:"ul"},"In both parts, we simply count the number of ",(0,i.kt)("inlineCode",{parentName:"li"},"Report"),"s that are considered safe.")),(0,i.kt)("h3",{id:"parsing"},"Parsing"),(0,i.kt)("p",null,"Each line of input is a string of numbers separated by a single space.\nTherefore parsing looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'case class Report(levels: Seq[Long])\n\ndef parseLine(line: String): Report = Report(line.split(" ").map(_.toLong).toSeq)\n\ndef parse(input: String): Seq[Report] = input\n  .linesIterator\n  .map(parseLine)\n  .toSeq\n')),(0,i.kt)("h3",{id:"part-1-methods-of-the-report-case-class"},"Part 1: methods of the ",(0,i.kt)("inlineCode",{parentName:"h3"},"Report")," case class"),(0,i.kt)("p",null,"We need to check consecutive pairs of numbers in each report in 3 ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"to see if they are all increasing,"),(0,i.kt)("li",{parentName:"ul"},"to see if they are all decreasing,"),(0,i.kt)("li",{parentName:"ul"},"to see if their differences are within given bounds.")),(0,i.kt)("p",null,"So let's construct them only once, save it as a ",(0,i.kt)("inlineCode",{parentName:"p"},"val"),", then reuse this value 3 times.\nIt's not the most efficient way (like traversing only once and keeping track of everything),\nbut it's very clean and simple:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"case class Report(levels: Seq[Long]):\n  val pairs = levels.init.zip(levels.tail) // consecutive pairs\n  def allIncr: Boolean = pairs.forall(_ < _)\n  def allDecr: Boolean = pairs.forall(_ > _)\n  def within(lower: Long, upper: Long): Boolean = pairs.forall: pair =>\n    val diff = math.abs(pair._1 - pair._2)\n    lower <= diff && diff <= upper\n  def isSafe: Boolean = (allIncr || allDecr) && within(1L, 3L)\n")),(0,i.kt)("p",null,"Part 1 solver simply counts safe reports, so it looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def part1(input: String): Int = parse(input).count(_.isSafe)\n")),(0,i.kt)("h3",{id:"part-2"},"Part 2"),(0,i.kt)("p",null,"Now we add new methods to ",(0,i.kt)("inlineCode",{parentName:"p"},"Report"),".\nWe check if there exists a ",(0,i.kt)("inlineCode",{parentName:"p"},"Report")," obtained by dropping one number, such that it's safe.\nWe do this by iterating over the index of each ",(0,i.kt)("inlineCode",{parentName:"p"},"Report"),".\nThen, a ",(0,i.kt)("inlineCode",{parentName:"p"},"Report")," is safe, if it's safe as in Part 1, or one of the dampened reports is safe:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"case class Report(levels: Seq[Long]):\n  // ... as before\n  def checkDampenedReports: Boolean = (0 until levels.size).exists: index =>\n    val newLevels = levels.take(index) ++ levels.drop(index + 1)\n    Report(newLevels).isSafe\n  def isDampenedSafe: Boolean = isSafe || checkDampenedReports\n")),(0,i.kt)("p",null,"Again this is not the most efficient way (we are creating many new ",(0,i.kt)("inlineCode",{parentName:"p"},"Report")," instances),\nbut our puzzle inputs are fairly short (there are at most 8 levels in each ",(0,i.kt)("inlineCode",{parentName:"p"},"Report"),"),\nso it's a simple approach that reuses the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSafe")," method from Part 1."),(0,i.kt)("p",null,"Part 2 solver now counts the dampened safe reports:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def part2(input: String): Int = parse(input).count(_.isDampenedSafe)\n")),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rmarbeck/advent2024/tree/main/day2"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/rmarbeck"},"Rapha\xebl Marbeck")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/YannMoisan/advent-of-code/blob/master/2024/src/main/scala/Day2.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/YannMoisan"},"YannMoisan")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Jannyboy11/AdventOfCode2024/blob/master/src/main/scala/day02/Day02.scala"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://x.com/JanBoerman95"},"Jan Boerman")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jnclt/adventofcode2024/blob/main/day02/red-nosed-reports.sc"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/jnclt"},"jnclt")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/bishabosha/advent-of-code-2024/blob/main/2024-day02.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/bishabosha"},"Jamie Thompson")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Philippus/adventofcode/blob/main/src/main/scala/adventofcode2024/Day02.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/philippus"},"Philippus Baalman")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rayrobdod/advent-of-code/blob/main/2024/02/day2.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/rayrobdod"},"Raymond Dodge")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/nikiforo/aoc24/blob/main/src/main/scala/io/github/nikiforo/aoc24/D2T2.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/nikiforo"},"Artem Nikiforov")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/itsjoeoui/aoc2024/blob/main/src/day02.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/itsjoeoui"},"itsjoeoui")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/makingthematrix/AdventOfCode2024/blob/main/src/main/scala/io/github/makingthematrix/AdventofCode2024/DayTwo.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/makingthematrix"},"Maciej Gorywoda")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/samuelchassot/AdventCode_2024/blob/60c782a1a05fbbb65e44fb923cddf48edc7b5625/02/Day02.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/samuelchassot"},"Samuel Chassot")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/scarf005/aoc-scala/blob/main/2024/day02.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/scarf005"},"scarf")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/nichobi/advent-of-code-2024/blob/main/02/solution.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/nichobi"},"nichobi")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/guycastle/advent_of_code/blob/main/src/main/scala/aoc2024/day02/DayTwo.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/guycastle"},"Guillaume Vandecasteele")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rolandtritsch/scala3-aoc-2024/blob/trunk/main/src/aoc2024/Day02.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/rolandtritsch"},"Roland Tritsch")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/profunctor-optics/advent-2024/blob/main/src/main/scala/advent2024/Day02.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/joroKr21"},"Georgi Krastev")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jportway/advent2024/blob/master/src/main/scala/Day2.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/jportway"},"Joshua Portway")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/TheDrawingCoder-Gamer/adventofcode2024/blob/e163baeaedcd90732b5e19f578a2faadeb1ef872/src/main/scala/day2.sc"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/TheDrawingCoder-Gamer"},"Bulby")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL/Advent-of-Code-2024/tree/main/src/main/scala/day2"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL"},"Pawe\u0142 Cembaluk"))),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page.\nYou can even write the whole article! ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/scala-advent-of-code/discussions/424"},"See here for the expected format")))}m.isMDXComponent=!0}}]);